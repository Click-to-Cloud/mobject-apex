{"title":"MObject.apex","githubRepo":"Click-to-Cloud/MObject.apex","googleAnalytics":"","index":{"title":"Home","description":"MObject.apex is a library to take care of persisting SObjects.","content":" Easy Persistence MObject.apex tracks changes and flushes them in one call. Method Chaining MObject.apex offers chainable methods for you to use. Namespace Solved MObject.apex helps you to solve the namespace issue. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/mobject-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/mobject-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/mobject-apex/docs/search.html"},"MObject":{"title":"MObject","description":"MObject","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} What is an MObject? MObjects are short for Managed Objects, peer of SObjects. MObjects have similar data as SObjects. The difference between MObjects and SObjects is that MObjects track the changes and will flush the changes to persistence later. | Aspect | MObject | SObject | | ------ | ------- | ------- | | Field Access | Support nested field access through method calls | Direct field access through '.' | | Field Update | Support field update through method calls | Reference and relationship fields cannot be updated directly | | DML Operations | Can be done in one method call | Have to sort out SObjects before doing DML operations | Principals MObjects are used to facilitate DML operations on SObjects. Recommended usages are complicated DML operations spread in multiple SObjects. Example: MObject mpb = MObject.create(new Pricebook2()); mpb.put('Name', 'Price Book'); MObject mop = MObject.create(new Opportunity()); mop.put('Name', 'Opportunity'); mop.put('Pricebook2', mpb); mop.persist(); Object Network MObjects attempt to maintain an object network and usages through object access is promoted. This means that the lookup fields of SObjects will not be managed in MObjects. Instead, they are contained in managing the reference objects. MObject mop = MObject.create(new Opportunity()); mop.put('Name', 'Opportunity'); mop.put('Pricebook2', mpb); // Cannot do below mop.put('Pricebook2Id', mpb.get('Id')); How MObjects are Managed MObjects have some status fields to indicate the future DML operations on them. If the MObjects are marked as deleted, deletion operation will be carried on them. If the MObjects are marked as dirty, update operation will be carried on them. If the MObjects have no Ids on them, insertion operation will be carried on them. Managed Persistence Below is the process of managed persistence. A list of MObjects are accepted to be put into persistence. Traverse the MObjects to find the ones to be deleted. Perform deletion operations. Traverse the MObjects to find the ones that can be inserted, without the needs for others' ids. Perform insertion operations on these MObjects. Continue Step.4 until no MObjects to be inserted are found. Traverse the MObjects to find the ones to be updated. Perform update operations. The DML operations generated are as below: | Operation Name | Count | Description | | -------------- | ----- | ----------- | | Insert | 0 to N | Depends on the complexity of SObjects referencing each other | | Delete | 0 to 1 | All SObjects are deleted in one DML call | | Update | 0 to 1 | All SObjects are updated in one DML call | ","srcFilePath":"src/pages/docs/MObject/index.md","id":"MObject","location":"/docs/MObject/","url":"/mobject-apex/docs/MObject/"},"MObject_Funcs":{"children":{"functions":{"title":"Funcs","description":"MObject Funcs","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} create Create an instance of MObject MObject mo = (MObject)MObject.F.create.run(new Pricebook2(Name='test')); toMap Convert the MObject to map Map data = (Map)MObject.F.toMap.run(false, mo); get Get the value mapped by the path Object value = MObject.F.get.run('default', 'Name', mo); put Set the value mapped by the path MObject.F.put.run('Name', 'new Name', mo); markDeleted Mark the MObject as deleted MObject.F.markDeleted.run(true, mo); persist Persist the MObject(s) MObject.F.persist.run(mos); ","srcFilePath":"src/pages/docs/MObject_Funcs/functions.md","id":"functions","location":"/docs/MObject_Funcs/functions.html","url":"/mobject-apex/docs/MObject_Funcs/functions.html"}},"title":"MObject.Funcs","description":"Func objects in MObject","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} MObject.Funcs Reference Here is the reference of the Funcs from MObject.apex. You can use these Funcs in the way below: MObject mo = (MObject)MObject.F.create.run(new Pricebook2(Name='test')); ","srcFilePath":"src/pages/docs/MObject_Funcs/index.md","id":"MObject_Funcs","location":"/docs/MObject_Funcs/","url":"/mobject-apex/docs/MObject_Funcs/","childIds":["functions"]},"MObject_Instance":{"children":{"creation":{"title":"Creation Methods","description":"Creation methods of MObjects","layout":"guide","icon":"cloud","weight":1,"content":" {$page.description} create Static methods to create MObject instances. MObject mo = MObject.create(Pricebook2.sObjectType, new Map()); Methods are as below: | Name | Description | | ---- | ----------- | | create(Schema.SObjectType, Object) | Create an MObject from SObject type and source | | create(Schema.SObjectType) | Create a default MObject from SObject type | | create(String, Object) | Create an MObject from type name and source | | create(String) | Create a default MObject from type name | | create(Object) | Create an MObject from source | createList Static methods to create a list of MObject instances. List mos = MObject.createList(Pricebook2.sObjectType, new List()); Methods are as below: | Name | Description | | ---- | ----------- | | createList(Schema.SObjectType, List&lt;Object&gt;) | Create MObjects from SObject type and list of objects | | createList(String, List&lt;Object&gt;) | Create MObjects from type name and list of objects | | createList(List&lt;Object&gt;) | Create MObjects from list of objects | ","srcFilePath":"src/pages/docs/MObject_Instance/creation.md","id":"creation","location":"/docs/MObject_Instance/creation.html","url":"/mobject-apex/docs/MObject_Instance/creation.html"},"methods":{"title":"Methods","description":"methods of MObjects","layout":"guide","icon":"cloud","weight":3,"content":" {$page.description} toMap Convert the MObject to a map MObject mo = MObject.create(new Pricebook2(Name='pricebook')); Map data = mo.toMap(true); | Name | Description | | ---- | ----------- | | toMap(Boolean) | Convert to map, whether to trim namespace | | toMap() | Convert to map, keeping namespace | get Get the value from MObjects MObject mo = MObject.create(new Pricebook2(Name='pricebook')); String name = (String)mo.get('LastModifiedBy.Name', 'Unknown'); | Name | Description | | ---- | ----------- | | get(String, Object) | Get the value of the path, returning default value if null | | get(String) | Get the value of the path | | get(List&lt;String&gt;, Object) | Get the value of the path, returning default value if null | | get(List&lt;String&gt;) | Get the value of the path | put Update the value of the MObjects MObject mo = MObject.create(new Pricebook2(Name='pricebook')); mo.put('LastModifiedBy.Name', 'Wilson'); | Name | Description | | ---- | ----------- | | put(String, Object) | Update the value of the path | | put(List&lt;String&gt;, Object) | Update the value of the path | markAsDeleted Mark the MObjects as deleted MObject mo = MObject.create(new Pricebook2(Name='pricebook')); mo.markDeleted(true); | Name | Description | | ---- | ----------- | | markAsDeleted() | Mark the MObject as deleted | | markAsDeleted(Boolean) | Mark the MObject as deleted, cascadingly | isDirty Check if the MObject is dirty MObject mo = MObject.create(new Pricebook2(Name='pricebook')); Boolean dirty = mo.isDirty(); isDeleted Check if the MObject is marked as deleted MObject mo = MObject.create(new Pricebook2(Name='pricebook')); Boolean deleted = mo.isDeleted(); persist Persist the MObject MObject mo = MObject.create(new Pricebook2(Name='pricebook')); mo.put('Name', 'new name'); mo.persist(); List mos = MObject.createList(new List()); for(MObject mo : mos) { mo.put('Name', 'new name'); } MObject.persist(mos); ","srcFilePath":"src/pages/docs/MObject_Instance/methods.md","id":"methods","location":"/docs/MObject_Instance/methods.html","url":"/mobject-apex/docs/MObject_Instance/methods.html"}},"title":"MObject Instance","description":"Mobject Instance","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} MObject Instance Method Reference Here is the reference of the methods from MObject instance. ","srcFilePath":"src/pages/docs/MObject_Instance/index.md","id":"MObject_Instance","location":"/docs/MObject_Instance/","url":"/mobject-apex/docs/MObject_Instance/","childIds":["creation","methods"]}},"childIds":["MObject","MObject_Funcs","MObject_Instance","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/mobject-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with MObject.apex","url":"/mobject-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} MObject.apex has a dependency on R.apex. First, we will include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then, we will include MObject.apex. Include MObject.cls, and MObjectTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/mobject-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. MObject.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/mobject-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Create MObjects","description":"Create MObjects","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} MObjects are peers of SObjects, and we can create MObjects in multiple ways. // From SObject MObject mo = MObject.create(new Pricebook2()); // Create default MObject from SObject type mo = MObject.create(Pricebook2.sObjectType); // Create an MObject from a map mo = MObject.create('Pricebook2', new Map{ ... }); // Create a list of MObjects List mos = MObject.createList(new List{ ... }); If created MObjects do not have 'Id' fields filled, they are considered as New MObjects and insertion operation will be carried out for the New MObjects during persistence. ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/mobject-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Manipuate MObjects","description":"Manipuate MObjects","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} MObjects are designed to be easy to use. You can easily access the fields of the MObjects. Pricebook2 pb = [ ... ]; MObject mo = MObject.create(pb); // Get value String name = (String)mo.get('Name'); // Set value mo.put('Name', 'New ' + name); // Get nested value with default value String modifiedBy = (String)mo.get('LastModifiedBy.Name', 'Unknown'); // Update nested value in a list mo.put('Opportunities.0.Name', 'New op'); MObjects maintain a pure object relation network, and therefore fields like 'Pricebook2Id' are not used in MObjects to refer to references, as you can already access it directly by 'Pricebook.Id'. Calls of put(xxx) will mark the MObject as dirty, and update operation will be carried out for the dirty MObjects during persistence. ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/mobject-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Delete MObjects","description":"Delete MObjects","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} You cannot directly delete MObjects. You can only mark them as deleted, so that deletion operation will be carried out on them during persistence. Pricebook2 pb = [ ... ]; MObject mo = MObject.create(pb); mo.markDeleted(); You can mark an MObject as cascading delete, and this will in turn mark all the children MObjects to be deleted. Pricebook2 pb = [ ... ]; MObject mo = MObject.create(pb); // All referencing opportunities will be marked as deleted mo.markDeleted(true); ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/mobject-apex/tutorials/getting_started/step_5.html"},"step_6":{"title":"Persistence","description":"Persistence","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":6,"content":" {$page.title} Carrying out persistence is only one call and MObject.apex will do everything for you behind the scene. Pricebook2 pb = [ ... ]; MObject mo = MObject.create(pb); mo.put('Opportunities', new List{ ... }); mo.persist(); Or you can persist a list of MObjects at one time. List mos = MObject.createList(new List{ ... }); MObject.persist(mos); ","srcFilePath":"src/pages/tutorials/getting_started/step_6.md","id":"step_6","location":"/tutorials/getting_started/step_6.html","url":"/mobject-apex/tutorials/getting_started/step_6.html"},"step_7":{"title":"Namespace Free","description":"Namespace Free","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":7,"content":" {$page.title} When specifying the field names in MObject.apex, we don't need to consider the namespaces, as they are taken care of. MObject.apex will detect the namespace for us. Pricebook2 pb = [ ... ]; MObject mo = MObject.create(pb); mo.put('Code__c', 'New code'); // Equivalent to this mo.put('yourappCodec', 'New code'); ","srcFilePath":"src/pages/tutorials/getting_started/step_7.md","id":"step_7","location":"/tutorials/getting_started/step_7.html","url":"/mobject-apex/tutorials/getting_started/step_7.html"},"step_8":{"title":"Functional Support","description":"Functional Support","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":8,"content":" {$page.title} MObject.apex has builtin functional support. We can use functional chaining like this: MObject.create(pb) .put('Name', 'new pricebook') .put('Opportunities', new List{ ... }) .persist(); ","srcFilePath":"src/pages/tutorials/getting_started/step_8.md","id":"step_8","location":"/tutorials/getting_started/step_8.html","url":"/mobject-apex/tutorials/getting_started/step_8.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5","step_6","step_7","step_8"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/mobject-apex"}